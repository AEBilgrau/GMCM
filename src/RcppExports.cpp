// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// colSdsArma
arma::rowvec colSdsArma(const arma::mat& X, const int norm_type = 0);
RcppExport SEXP GMCM_colSdsArma(SEXP XSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP );
        Rcpp::traits::input_parameter< const int >::type norm_type(norm_typeSEXP );
        arma::rowvec __result = colSdsArma(X, norm_type);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rowSdsArma
arma::colvec rowSdsArma(const arma::mat& X, const int norm_type = 0);
RcppExport SEXP GMCM_rowSdsArma(SEXP XSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP );
        Rcpp::traits::input_parameter< const int >::type norm_type(norm_typeSEXP );
        arma::colvec __result = rowSdsArma(X, norm_type);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// dmvnormal
arma::mat dmvnormal(arma::mat& x, arma::rowvec mu, arma::mat sigma);
RcppExport SEXP GMCM_dmvnormal(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP );
        Rcpp::traits::input_parameter< arma::rowvec >::type mu(muSEXP );
        Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP );
        arma::mat __result = dmvnormal(x, mu, sigma);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rmvnormal
arma::mat rmvnormal(const int n, arma::rowvec mu, arma::mat sigma);
RcppExport SEXP GMCM_rmvnormal(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int >::type n(nSEXP );
        Rcpp::traits::input_parameter< arma::rowvec >::type mu(muSEXP );
        Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP );
        arma::mat __result = rmvnormal(n, mu, sigma);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// dgmm_loglik
arma::colvec dgmm_loglik(Rcpp::List mus, Rcpp::List sigmas, Rcpp::NumericVector pie, arma::mat& z, bool marginal_loglik);
RcppExport SEXP GMCM_dgmm_loglik(SEXP musSEXP, SEXP sigmasSEXP, SEXP pieSEXP, SEXP zSEXP, SEXP marginal_loglikSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type mus(musSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type sigmas(sigmasSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pie(pieSEXP );
        Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP );
        Rcpp::traits::input_parameter< bool >::type marginal_loglik(marginal_loglikSEXP );
        arma::colvec __result = dgmm_loglik(mus, sigmas, pie, z, marginal_loglik);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// dgmm_loglik_marginal
arma::mat dgmm_loglik_marginal(Rcpp::List mus, Rcpp::List sigmas, Rcpp::NumericVector pie, arma::mat& z, bool marginal_loglik);
RcppExport SEXP GMCM_dgmm_loglik_marginal(SEXP musSEXP, SEXP sigmasSEXP, SEXP pieSEXP, SEXP zSEXP, SEXP marginal_loglikSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::List >::type mus(musSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type sigmas(sigmasSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pie(pieSEXP );
        Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP );
        Rcpp::traits::input_parameter< bool >::type marginal_loglik(marginal_loglikSEXP );
        arma::mat __result = dgmm_loglik_marginal(mus, sigmas, pie, z, marginal_loglik);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// approx_pnorm
arma::colvec approx_pnorm(arma::colvec& z, const double mu, const double sd);
RcppExport SEXP GMCM_approx_pnorm(SEXP zSEXP, SEXP muSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::colvec& >::type z(zSEXP );
        Rcpp::traits::input_parameter< const double >::type mu(muSEXP );
        Rcpp::traits::input_parameter< const double >::type sd(sdSEXP );
        arma::colvec __result = approx_pnorm(z, mu, sd);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// pgmm_marginal
arma::mat pgmm_marginal(arma::mat& z, Rcpp::List mus, Rcpp::List sigmas, Rcpp::NumericVector pie);
RcppExport SEXP GMCM_pgmm_marginal(SEXP zSEXP, SEXP musSEXP, SEXP sigmasSEXP, SEXP pieSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type mus(musSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type sigmas(sigmasSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pie(pieSEXP );
        arma::mat __result = pgmm_marginal(z, mus, sigmas, pie);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// EStepRcpp
arma::mat EStepRcpp(arma::mat& z, Rcpp::List mus, Rcpp::List sigmas, Rcpp::NumericVector pie);
RcppExport SEXP GMCM_EStepRcpp(SEXP zSEXP, SEXP musSEXP, SEXP sigmasSEXP, SEXP pieSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type mus(musSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type sigmas(sigmasSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pie(pieSEXP );
        arma::mat __result = EStepRcpp(z, mus, sigmas, pie);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
